#!/usr/bin/env groovy
@Library("pipeline@release/2.x") _

/**
 * This file tells Pipeline Jenkins how to build and deploy the project.
 * See https://wiki.indeed.com/display/PIPELINE/The+Jenkinsfile for details.
 */

script = this

bootstrap(script) {
    // Git URL
    gitConfig.gitUrl = "git@code.corp.indeed.com:cfeliz/issue-sync.git"
    // Main development branch. Note: if you put develop here, master will be ignored by the pipeline.
    gitConfig.gitBranch = "indeed-release"
    
    // JIRA project where deploy tickets should be created
    jiraConfig.jiraProjectKey = "OSST"
    jiraConfig.enableJiraActions = true

    // Path to the deployable generated by the ant command
    buildConfig.deployablePath = "dist/issue-sync.tar.gz"
    
    config.nodeName = "indeed-go-medium"
    // Jenkins will send an email when there is a new build available to the following list of comma-separated addresses
    config.newBuildAvailableEmailList = "cfeliz@indeed.com"
    // Jenkins will send an email if the build fails to the following list of comma-separated addresses and everyone who committed since the last successful build
    config.failureEmailList = config.newBuildAvailableEmailList
    // Product group
    config.productGroup = "osst"
    // Uses dockerized build
    config.buildInDocker = true
    config.trustLastCommitter = true
    
    // A list of URLs of your current version in QA and stage
    // Example: https://example.sandbox.qa.indeed.net/private/healthcheck
    config.currentVersionUrlList = []
    // config.versionCheckRetries = 10
    // config.versionCheckSleepIntervalSeconds = 15

    // A list of URLs of your healthchecks in QA and stage
    // For example: https://example.sandbox.qa.indeed.net/private/healthcheck
    config.healthCheckUrlList = []
    // config.healthCheckRetries = 10
    // config.healthCheckSleepIntervalSeconds = 5

    // A list of URLs of your current version in prod
    // For example: https://example.com/private/current_version.txt
    config.currentProdVersionUrlList = []

    // Set true to fail the build if verification instructions are not provided in annotated git tags for each issue
    config.requireVerificationInstructions = false

    // Set true to enable Slack notifications
    // slackConfig.enable = true
    // slackConfig.channel = "#devops-deploys"
}

buildPipeline(script) {
    createDeployable(script) {
        sshagent(["gitlab_jenkins_ssh"]) {
            sh "/usr/local/bin/container-startup-without-sleep"
            sh "bash -c '" +
               "rm -rf ./jenkies; " +
               "git clone git@code.corp.indeed.com:gophers/jenkies.git; " +
               "npm install;" +
               "./jenkies/build-jenkins-pipeline.sh -d -t -b -m; " +
               "'"
        }
        stash name: "tarball", includes: buildConfig.deployablePath
    }

    stage("Build and push image") {
        final String REVISION_TAG = "build-" + buildDetails.validGitCommit.substring(0, 8) + "-" + buildDetails.validDeployTimeString;
        echo "Publishing image with revision tags: latest, ${REVISION_TAG}"
        buildAndPushImageToQARegistry(
            gitUrl: "git@code.corp.indeed.com:cfeliz/issue-sync.git",
            gitBranch: "indeed-release",
            imageName: "tst-pushregistry1:443/qa/apps/devops/penelope/penelope",
            imageTags: ["latest", REVISION_TAG],
            dockerfilePath: "./Dockerfile",
            useCache: false,
            setupSteps: {
                unstash name: "tarball"
            },
            script,
        )
    }

    approveDeploy(deployEnv: "QA", alwaysDoUserInput: true, script)

    uploadToArc(script)
    
    checkQaVersion(script)
}

